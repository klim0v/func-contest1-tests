{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
msg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If message body does not corresponds to `MsgBody` type described above, request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted). Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}

int equal_slices (slice a, slice b) asm "SDEQ";

;; testable
cell pack_data(int public_key1, int public_key2) method_id {
  ;; Fill in
  var pks = begin_cell().end_cell();
  pks~udict_set(256, public_key1, null());
  pks~udict_set(256, public_key2, null());
  return begin_cell()
    .store_dict(pks)
    .store_ref(null())
    .end_cell();
}

(cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    return (ds~load_dict(), ds~load_ref());
}

() save_data(cell pks, cell pending_query) {
    set_data(begin_cell().store_dict(pks).store_ref(pending_query).end_cell());
}

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

;; testable
() recv_external (slice in_msg_body) impure {
    var pk = in_msg_body~load_uint(256);

    var (public_keys, pending_query) = load_data();

    (_, var found?) = public_keys.udict_get?(pk, 256);
    throw_unless(31, found?);

    ;; Check root signature
    slice root_signature = in_msg_body~load_bits(512);
    int root_hash = slice_hash(in_msg_body);
    int root_i = in_msg_body~load_uint(8);
	cell signatures = in_msg_body~load_dict();
	var hash = slice_hash(in_msg_body);
	throw_unless(32, check_signature(root_hash, root_signature, pk));

	var request = in_msg_body~load_ref().begin_parse();

	var valid_until = request~load_uint(32);
	throw_if(35, valid_until <= now());

	var mode = request~load_uint(8);
	var msg = request~load_ref();
	var msg_to_send = msg.begin_parse();

    var hash_msg_to_send = slice_hash(msg_to_send);

    var pq = pending_query.begin_parse();
    if pq.slice_bits() == 0 {
        save_data(public_keys, begin_cell().store_uint(valid_until, 32).store_uint(hash_msg_to_send, 256).store_uint(pk, 256).end_cell());
        return ();
    }
	var pending_query_valid_until = pq~load_uint(32);
	throw_if(36, pending_query_valid_until <= now());

	var pending_query_hash = pq~load_uint(256);
	if hash_msg_to_send != pending_query_hash {
        throw(37);
    }

    var pending_query_signer = pq~load_uint(256);
    if pending_query_signer == pk {
        throw(38);
    }


    save_data(public_keys, null());
    send_raw_message(msg, mode);
    commit();

;;     todo
;;     set_gas_limit(100000);
;;

	accept_message();
}